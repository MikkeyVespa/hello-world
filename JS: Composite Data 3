my decision

// @ts-check
import {
  makePoint, getX, getY, toString as pointToString,
} from '@hexlet/points';
import { cons, car, cdr } from '@hexlet/pairs';

// BEGIN (write your solution here)
export const makeSegment = (point1, point2) => cons(point1, point2);
export const startSegment = (segment) => car(segment);
export const endSegment = (segment) => cdr(segment);
export const segmentToString = (segment) => `[${pointToString(startSegment(segment))}, ${pointToString(endSegment(segment))}]`;
export const midpointSegment = (segment) => makePoint((getX(car(segment))
  + getX(cdr(segment))) / 2, (getY(car(segment)) + getY(cdr(segment))) / 2);
// END


teacher's decision

// @ts-check
import {
  makePoint, getX, getY, toString as pointToString,
} from '@hexlet/points';
import { cons, car, cdr } from '@hexlet/pairs';

// BEGIN
export const makeSegment = (point1, point2) => cons(point1, point2);

export const startSegment = (segment) => car(segment);

export const endSegment = (segment) => cdr(segment);

export const segmentToString = (segment) => `[${pointToString(startSegment(segment))}, ${pointToString(endSegment(segment))}]`;

export const midpointSegment = (segment) => {
  const startPoint = startSegment(segment);
  const endPoint = endSegment(segment);
  const x = (getX(startPoint) + getX(endPoint)) / 2;
  const y = (getY(startPoint) + getY(endPoint)) / 2;

  return makePoint(x, y);
};
// END
