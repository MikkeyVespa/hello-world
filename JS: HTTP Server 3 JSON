teacher's decision:
// @ts-check
/* eslint-disable no-console */

import http from 'http';

export default (usersById) => http.createServer((request, response) => {
  request.on('error', (err) => {
    console.error(err.stack);
  });
  request.on('end', () => {
    if (request.url === '/') {
      const messages = [
        'Welcome to The Phonebook',
        `Records count: ${Object.keys(usersById).length}`,
      ];
      response.end(messages.join('\n'));
    } else if (request.url.startsWith('/search.json')) {
      response.setHeader('Content-Type', 'application/json');

      const url = new URL(request.url, `http://${request.headers.host}`);
      const q = url.searchParams.get('q');
      const normalizedSearch = q ? q.trim().toLowerCase() : '';

      const result = Object.values(usersById)
        .filter((user) => user.name.toLowerCase().includes(normalizedSearch));

      response.end(JSON.stringify(result));
    } else if (request.url.startsWith('/users.json')) {
      // BEGIN
      response.setHeader('Content-Type', 'application/json');

      const url = new URL(request.url, `http://${request.headers.host}`);
      const page = url.searchParams.get('page');
      const perPage = url.searchParams.get('perPage');
      const parsedPage = page ? Number(page) : 1;
      const parsedPerPage = perPage ? Number(perPage) : 10;
      const users = Object.values(usersById);

      const usersSubset = users
        .slice((parsedPage * parsedPerPage) - parsedPerPage, parsedPage * parsedPerPage);
      const totalPages = Math.ceil(users.length / parsedPerPage);

      response.end(JSON.stringify({
        meta: { page: parsedPage, perPage: parsedPerPage, totalPages },
        data: usersSubset,
      }));
      // END
    }
  });
  request.resume();
});

my decision:
// @ts-check
/* eslint-disable no-console */

import http from 'http';

export default (usersById) => http.createServer((request, response) => {
  request.on('error', (err) => {
    console.error(err.stack);
  });
  request.on('end', () => {
    if (request.url === '/') {
      const messages = [
        'Welcome to The Phonebook',
        `Records count: ${Object.keys(usersById).length}`,
      ];
      response.end(messages.join('\n'));
    } else if (request.url.startsWith('/search.json')) {
      response.setHeader('Content-Type', 'application/json');

      const url = new URL(request.url, `http://${request.headers.host}`);
      const q = url.searchParams.get('q');
      const normalizedSearch = q ? q.trim().toLowerCase() : '';

      const result = Object.values(usersById)
        .filter((user) => user.name.toLowerCase().includes(normalizedSearch));

      response.end(JSON.stringify(result));
    } else if (request.url.startsWith('/users.json')) {
      // BEGIN (write your solution here)
      response.setHeader('Content-Type', 'application/json');

      const url = new URL(request.url, `http://${request.headers.host}`);
      const page = parseInt(url.searchParams.get('page')) || 1;
      const perPage = parseInt(url.searchParams.get('perPage')) || 10;

      const offset = (page - 1) * perPage;
      const totalPages = Math.ceil(Object.keys(usersById).length / perPage);

      const users = Object.values(usersById)
        .slice(offset, offset + perPage)
        .map((user) => ({ name: user.name, phone: user.phone }));

      const responseData = {
        meta: { page, perPage, totalPages },
        data: users,
      };

      response.end(JSON.stringify(responseData));
      // END
    }
  });
  request.resume();
});
